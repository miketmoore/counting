{"version":3,"sources":["useCount.ts","useGetInitialCount.ts","useUpdateCount.ts","LoadingFab.tsx","CountView.tsx","CountsSeen.tsx","App.tsx","reportWebVitals.js","ErrorBoundary.tsx","index.js"],"names":["useCount","useState","initialEnabled","setInitialEnabled","requestEnabled","setRequestEnabled","count","setCount","enabled","isLoading","setIsLoading","error","setError","mountedRef","useRef","useEffect","a","handleError","errorMessage","Error","fetch","method","response","status","json","current","fetchData","useGetInitialCount","initialCount","isLoadingInitial","errorInitial","sendRequest","useUpdateCount","updatedCount","isLoadingUpdate","errorUpdated","useDebugValue","requestUpdatedCount","LoadingFab","testId","ariaLabel","onClick","children","color","Fab","data-testid","aria-label","disabled","CircularProgress","CountView","Grid","container","spacing","justifyContent","alignItems","item","Typography","variant","component","PlusOneRounded","CountsSeen","countsSeen","setCountsSeen","includes","List","dense","map","countSeen","ListItem","ListItemText","primary","useStyles","makeStyles","theme","root","display","margin","avatar","width","height","InitialLoadingView","App","classes","Container","Snackbar","open","autoHideDuration","elevation","severity","direction","style","minHeight","Paper","padding","marginBottom","Avatar","alt","className","src","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","props","state","hasError","errorInfo","console","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b0b4756.chunk.js","sourcesContent":["import { useDebugValue, useEffect, useState } from \"react\";\r\nimport { Count } from \"./count-types\";\r\nimport { useGetInitialCount } from \"./useGetInitialCount\";\r\nimport { useUpdateCount } from \"./useUpdateCount\";\r\n\r\ninterface UseCountResponse {\r\n  isLoadingInitial: boolean;\r\n  isLoadingUpdate: boolean;\r\n  error: Error | null;\r\n  count: number;\r\n  requestUpdatedCount: () => void;\r\n}\r\n\r\ntype UseCount = () => UseCountResponse;\r\n\r\nexport const useCount: UseCount = () => {\r\n  const [initialEnabled, setInitialEnabled] = useState(true);\r\n  const [requestEnabled, setRequestEnabled] = useState(false);\r\n  const [count, setCount] = useState<Count>(null);\r\n\r\n  const {\r\n    count: initialCount,\r\n    isLoading: isLoadingInitial,\r\n    error: errorInitial,\r\n  } = useGetInitialCount({\r\n    enabled: initialEnabled,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (initialCount != null) {\r\n      setCount(initialCount);\r\n      setInitialEnabled(false);\r\n    }\r\n  }, [initialCount, setCount, setInitialEnabled]);\r\n\r\n  const {\r\n    count: updatedCount,\r\n    isLoading: isLoadingUpdate,\r\n    error: errorUpdated,\r\n  } = useUpdateCount({\r\n    requestEnabled,\r\n    setRequestEnabled,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (updatedCount) {\r\n      setCount(updatedCount);\r\n    }\r\n  }, [updatedCount]);\r\n\r\n  useDebugValue(`Count:${count}`);\r\n\r\n  return {\r\n    isLoadingInitial,\r\n    isLoadingUpdate,\r\n    error: errorInitial || errorUpdated,\r\n    count: count == null ? 0 : count,\r\n    requestUpdatedCount: () => setRequestEnabled(true),\r\n  };\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nexport const useGetInitialCount = ({ enabled }: { enabled: boolean }) => {\r\n  const [count, setCount] = useState<number | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const mountedRef = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const handleError = (errorMessage: string) => {\r\n        setError(new Error(errorMessage));\r\n        setIsLoading(false);\r\n      };\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await fetch(\"/api/count/get\", { method: \"GET\" });\r\n        if (response.status >= 400) {\r\n          handleError(\"Get request returned an error\");\r\n        }\r\n        const { count } = await response.json();\r\n        if (mountedRef.current) {\r\n          setIsLoading(false);\r\n          setCount(count);\r\n        }\r\n      } catch (error) {\r\n        handleError(\"Get request failed\");\r\n      }\r\n    };\r\n    if (count == null && enabled) {\r\n      fetchData();\r\n    }\r\n  }, [count, enabled]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    count,\r\n    isLoading,\r\n    error,\r\n  };\r\n};\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const useUpdateCount = ({\r\n  requestEnabled,\r\n  setRequestEnabled,\r\n}: {\r\n  requestEnabled: boolean;\r\n  setRequestEnabled: (enabled: boolean) => void;\r\n}) => {\r\n  const [count, setCount] = useState<number | null>(null);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const mountedRef = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const sendRequest = async () => {\r\n      const handleError = (errorMessage: string) => {\r\n        setError(new Error(errorMessage));\r\n        setIsLoading(false);\r\n      };\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await fetch(\"/api/count/update\", { method: \"PUT\" });\r\n        if (response.status >= 400) {\r\n          handleError(\"Update request returned an error\");\r\n        }\r\n        const { count } = await response.json();\r\n        if (mountedRef.current) {\r\n          setCount(count);\r\n          setIsLoading(false);\r\n        }\r\n      } catch (error) {\r\n        handleError(\"Update request failed\");\r\n      }\r\n    };\r\n    if (requestEnabled) {\r\n      setRequestEnabled(false);\r\n      sendRequest();\r\n    }\r\n  }, [\r\n    mountedRef,\r\n    requestEnabled,\r\n    setRequestEnabled,\r\n    setError,\r\n    setIsLoading,\r\n    setCount,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    count,\r\n    isLoading,\r\n    error,\r\n  };\r\n};\r\n","import { CircularProgress, Fab, PropTypes } from \"@material-ui/core\";\r\n\r\nexport function LoadingFab({\r\n  testId,\r\n  ariaLabel,\r\n  isLoading,\r\n  onClick,\r\n  children,\r\n  color,\r\n}: {\r\n  testId?: string;\r\n  ariaLabel?: string;\r\n  isLoading: boolean;\r\n  onClick: () => void;\r\n  children: JSX.Element;\r\n  color: PropTypes.Color;\r\n}) {\r\n  return (\r\n    <Fab\r\n      data-testid={testId}\r\n      color={color}\r\n      aria-label={ariaLabel}\r\n      onClick={() => onClick()}\r\n      disabled={isLoading}\r\n    >\r\n      {isLoading ? (\r\n        <CircularProgress data-testid=\"loadingfab-progress\" />\r\n      ) : (\r\n        children\r\n      )}\r\n    </Fab>\r\n  );\r\n}\r\n","import { Typography, Grid } from \"@material-ui/core\";\r\nimport { LoadingFab } from \"./LoadingFab\";\r\nimport { PlusOneRounded } from \"@material-ui/icons\";\r\n\r\nexport function CountView({\r\n  count,\r\n  onClick,\r\n  isLoading,\r\n}: {\r\n  count: number;\r\n  onClick: () => void;\r\n  isLoading: boolean;\r\n}) {\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      data-testid=\"count-view\"\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h3\" component=\"h2\">\r\n          Count: <span data-testid=\"count-value\">{count}</span>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <LoadingFab\r\n          color=\"primary\"\r\n          isLoading={isLoading}\r\n          onClick={onClick}\r\n          testId=\"update-button\"\r\n          ariaLabel=\"update\"\r\n        >\r\n          <PlusOneRounded data-testid=\"plus-one-icon\" />\r\n        </LoadingFab>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { Typography, List, ListItem, ListItemText } from \"@material-ui/core\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function CountsSeen({ count }: { count: number }) {\r\n  const [countsSeen, setCountsSeen] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (count > 0 && !countsSeen.includes(count)) {\r\n      setCountsSeen([count, ...countsSeen]);\r\n    }\r\n  }, [count, countsSeen]);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        Counts Seen\r\n      </Typography>\r\n      <List dense={true}>\r\n        {countsSeen.map((countSeen) => (\r\n          <ListItem key={countSeen}>\r\n            <ListItemText primary={countSeen} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { useCount } from \"./useCount\";\r\nimport {\r\n  CircularProgress,\r\n  Avatar,\r\n  Typography,\r\n  Paper,\r\n  Container,\r\n  Grid,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { CountView } from \"./CountView\";\r\nimport { CountsSeen } from \"./CountsSeen\";\r\n\r\nimport \"@fontsource/roboto\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(8),\r\n    height: theme.spacing(8),\r\n  },\r\n}));\r\n\r\nfunction InitialLoadingView() {\r\n  return <CircularProgress data-testid=\"initial-loading-indicator\" />;\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    isLoadingInitial,\r\n    isLoadingUpdate,\r\n    error,\r\n    count,\r\n    requestUpdatedCount,\r\n  } = useCount();\r\n\r\n  return (\r\n    <Container>\r\n      <Snackbar open={error != null} autoHideDuration={6000}>\r\n        <MuiAlert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          severity=\"error\"\r\n          data-testid=\"error-alert\"\r\n        >\r\n          An error occurred\r\n        </MuiAlert>\r\n      </Snackbar>\r\n      <Grid\r\n        container\r\n        spacing={0}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <Paper\r\n          elevation={6}\r\n          style={{\r\n            padding: 40,\r\n            marginBottom: 20,\r\n          }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h3\" component=\"h1\">\r\n                ***REMOVED***\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Avatar\r\n                alt=\"Purple Cow\"\r\n                className={classes.avatar}\r\n                src=\"***REMOVED***\"\r\n                data-testid=\"avatar\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            <Grid item>\r\n              {isLoadingInitial ? (\r\n                <InitialLoadingView />\r\n              ) : (\r\n                <CountView\r\n                  count={count}\r\n                  onClick={requestUpdatedCount}\r\n                  isLoading={isLoadingUpdate}\r\n                />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <Paper\r\n          elevation={6}\r\n          style={{\r\n            padding: 40,\r\n            height: 150,\r\n            overflowY: \"scroll\",\r\n          }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            <Grid item>\r\n              <CountsSeen count={count} />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\ninterface Props {\n  children: any;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: any) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}